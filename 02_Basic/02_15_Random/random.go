package main

import (
	"fmt"
	"math/rand"
	"strings"
	"time"
)

func main() {
	// Initialize the random seed to an unknown value
	rand.Seed(time.Now().UnixNano()) // UnixNano() gives low level time in nanoseconds

	// generate random Integer numbers
	fmt.Println(rand.Int())    // Int() returns a random integer
	fmt.Println(rand.Intn(10)) // Intn(n) returns a random integer between 0 and n-1

	// generate random Floating Point numbers
	fmt.Println(rand.Float32())
	fmt.Println(rand.Float64())

	// use the Perm function to create permutations
	s := []string{"apple", "pear", "grape", "orange", "kiwi", "melon"}
	indexes := rand.Perm(len(s))
	fmt.Println(indexes)
	// [5 2 4 1 3 0] - the indexes are shuffled - each time run gets a different order
	for i := 0; i < len(indexes); i++ {
		fmt.Println(s[indexes[i]])
	}
	// melon
	// grape
	// kiwi
	// pear
	// orange
	// apple

	// Generate a random integer between a and b:
	const a, b = 10, 50
	for i := 0; i < 10; i++ {
		n := a + rand.Intn(b-a+1)
		fmt.Print(n, " ")
	}
	fmt.Println() // 34 45 37 33 26 38 17 32 41 44

	// Generate a random uppercase character:
	for i := 0; i < 10; i++ {
		c := string('A' + rune(rand.Intn('Z'-'A'+1)))
		fmt.Printf("%s ", c)
	}
	fmt.Println() // K N H N A K X Q I J

	// --------------- Use Random -----------------
	// Shuffle a sequence of values
	const numstring = "one two three four five six"
	// Field splits string by white space and return a slice of strings
	words := strings.Fields(numstring)
	// Shuffle the slice of strings
	rand.Shuffle(len(words), func(i, j int) {
		// call back function
		// swap the values of the two indexes
		// shuffles the elements of the slice randomly by repeatedly calling the callback function
		// and swapping elements based on the indexes generated by the random number generator.
		words[i], words[j] = words[j], words[i]
	})
	fmt.Println(words) // [three five one six four two]

	// Password generation
	const upletters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	const lowletters = "abcdefghijklmnopqrstuvwxyz"
	const digits = "0123456789"
	const specialchars = "~=+%^*()[]{}!@#$?|"
	const allchars = upletters + lowletters + digits + specialchars

	var sb strings.Builder
	length := 10
	for i := 0; i < length; i++ {
		sb.WriteRune(rune(allchars[rand.Intn(len(allchars))]))
	}
	fmt.Println("String Result:", sb.String())

	// Password generation with rules
	buf := make([]byte, length) // make a byte slice of length,
	// byte is an alias for uint8 which can represent ASCII characters
	buf[0] = digits[rand.Intn(len(digits))]
	buf[1] = specialchars[rand.Intn(len(specialchars))]
	buf[2] = upletters[rand.Intn(len(upletters))]
	buf[3] = lowletters[rand.Intn(len(lowletters))]
	// starting at 4 b/c 0-3 are already filled in above
	for i := 4; i < length; i++ {
		buf[i] = allchars[rand.Intn(len(allchars))]
	}
	// now shuffle
	rand.Shuffle(len(buf), func(i, j int) {
		buf[i], buf[j] = buf[j], buf[i]
	})
	fmt.Println("Rules Result:", string(buf))
}
